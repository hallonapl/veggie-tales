package se.hallonapl.veggietales.persistence;

import java.util.ArrayList;
import java.util.List;
import com.microsoft.sqlserver.jdbc.*;

import se.hallonapl.veggietales.model.Vegetable;
import java.sql.*;

public class SQLService implements IPersistenceService {
	private SQLServerDataSource ds;
	private Connection cn;	
	
	private static final String vegetableIDColumnName = "ID";
	private static final String vegetablePriceColumnName = "Price";
	private static final String vegetableNameColumnName = "Name";
	
	private static final String selectAllSQL = "SELECT * FROM [Vegetable]";
	private static final String selectByIdSQL = "SELECT * FROM [Vegetable] WHERE [" + vegetableIDColumnName + "] = ?";
	private static final String updateByIdSQL = "UPDATE [Vegetable] SET [" + vegetablePriceColumnName + "] = ?, [" + vegetableNameColumnName + "] = ? WHERE [" + vegetableIDColumnName + "] = ?";
	private static final String deleteByIdSQL = "DELETE FROM [Vegetable] WHERE [" + vegetableIDColumnName + "] = ?";
	private static final String insertSQL = "INSERT INTO [Vegetable] ([" + vegetablePriceColumnName + "], [" + vegetableNameColumnName + "]) VALUES (?, ?)";
	
	private static final String dataBasePath = "127.0.0.1";
	private static final String dataBaseName = "VeggieTales";
	private static final String user = "veggie";
	private static final String password = "snth0987?";
	
	public SQLService() throws SQLException {

		ds = new SQLServerDataSource();
		ds.setServerName(dataBasePath);
		ds.setDatabaseName(dataBaseName);
		ds.setUser(user);
		ds.setPassword(password);
		
		cn = ds.getConnection();
	}
	
	@Override
	public List<Vegetable> retrieveAllVegetables() throws Exception {
		PreparedStatement sm = null;
		ResultSet rs = null;
		List<Vegetable> result = new ArrayList<Vegetable>();
		Vegetable vgt = null;
		
		int id;
		double price;
		String name;

		if (cn != null) {
			try {
				sm = cn.prepareStatement(selectAllSQL);
				rs = sm.executeQuery();
				while (rs.next()) {
					id = rs.getInt(vegetableIDColumnName);
					price = rs.getDouble(vegetablePriceColumnName);
					name = rs.getString(vegetableNameColumnName);
					vgt = new Vegetable(id, price, name);
					result.add(vgt);
				}
			}
			catch (SQLException se){
				throw new Exception(se);
			}
		}
		else {
			throw new SQLServerException("No SQL connection",null); //TODO lookup: does this get a stack trace when thrown?
		}

		return result;
	}

	@Override
	public Vegetable retrieveVegetable(int id) throws Exception {
		PreparedStatement sm = null;
		ResultSet rs = null;
		Vegetable vgt = null;

		double price;
		String name;

		if (cn != null) {
			try {
				sm = cn.prepareStatement(selectByIdSQL);
				sm.setInt(1, id);
				rs = sm.executeQuery();
				if (rs.next()) {
					price = rs.getDouble(vegetablePriceColumnName);
					name = rs.getString(vegetableNameColumnName);
					vgt = new Vegetable(id, price, name);
				}
			}
			catch (SQLException se){
				throw new Exception(se);
			}
		}
		else {
			throw new SQLServerException("No SQL connection",null); //TODO lookup: does this get a stack trace when thrown?
		}
		return vgt;
	}

	@Override
	public boolean tryDeleteVegetable(int id) throws Exception {
		PreparedStatement sm = null;
		Boolean success;
		if (cn != null) {
			try {
				sm = cn.prepareStatement(deleteByIdSQL);
				sm.setInt(1, id);
				success = (sm.executeUpdate() >= 0);
			}
			catch (SQLException se){
				throw new Exception(se);
			}
		}
		else {
			throw new SQLServerException("No SQL connection",null); //TODO lookup: does this get a stack trace when thrown?
		}
		return success;
	}

	@Override
	public boolean tryUpdateVegetable(int id, double newPrice, String newName) throws Exception {
		PreparedStatement sm = null;
		Boolean success;
		if (cn != null) {
			try {
				sm = cn.prepareStatement(updateByIdSQL);
				sm.setDouble(1, newPrice);
				sm.setString(2, newName);
				sm.setInt(3, id);
				success = (sm.executeUpdate() >= 0);
			}
			catch (SQLException se){
				throw new Exception(se);
			}
		}
		else {
			throw new SQLServerException("No SQL connection",null);
		}
		return success;
	}

	@Override
	public int createVegetable(double price, String name) throws Exception {
		PreparedStatement sm = null;
		ResultSet rs = null;
		int newId;
		
		if (cn != null) {
			try {
				sm = cn.prepareStatement(insertSQL, Statement.RETURN_GENERATED_KEYS);
				sm.setDouble(1, price);
				sm.setString(2, name);
				//if (sm.executeUpdate() >= 0) { //will this get the autogenerated keys?
				sm.executeUpdate(); //will this get the autogenerated keys?
				rs = sm.getGeneratedKeys();
				if (rs.next()) { //will this ever return a zero rs if the execute returned non-zero?
					newId = rs.getInt(1);
				}
				else {
					newId = -1;
				}
			}
			catch (SQLException se){
				throw new Exception(se);
			}
		}
		else {
			throw new SQLServerException("No SQL connection",null); //TODO lookup: does this get a stack trace when thrown?
		}
		return newId;
	}

	
}
